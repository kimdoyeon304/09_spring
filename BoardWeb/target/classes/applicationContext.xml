<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd">



	<context:component-scan base-package="polymorphism"></context:component-scan>
	<bean class="polymorphism.SonySpeaker" />
	
	<context:component-scan base-package="com.springbook.biz" />
	
	
	<!-- <bean id="userService" class="com.springbook.biz.user.impl.UserServiceImpl">
		<property name="userDAO" ref="userDAO" />
	</bean>
	
	<bean id="userDAO" class="com.springbook.biz.user.impl.UserDAO" /> -->
	
	

	
	<!-- <bean id="log" class="com.springbook.biz.common.LogAdvice"></bean>
	<bean id="log" class="com.springbook.biz.common.Log4jAdvice"></bean> -->
	<!-- <bean id="before" class="com.springbook.biz.common.BeforeAdvice" />
	<bean id="afterReturning" class="com.springbook.biz.common.AfterReturningAdvice" />
	<bean id="afterThrowing" class="com.springbook.biz.common.AfterThrowingAdvice" />
	<bean id="after" class="com.springbook.biz.common.AfterAdvice" />
	<bean id="around" class="com.springbook.biz.common.AroundAdvice" />
	
	
	<aop:config>
		<aop:pointcut id="allPointcut" expression="execution(* com.springbook.biz..*Impl.*(..))" />
		<aop:pointcut id="getPointcut" expression="execution(* com.springbook.biz..*Impl.get*(..))" /> -->
		
		<!-- <aop:aspect ref="log">
			<aop:before pointcut-ref="allPointcut" method="printLog" />
			<aop:before pointcut-ref="allPointcut" method="printLogging" />
			<aop:before pointcut-ref="getPointcut" method="printLog" />
			<aop:after pointcut-ref="getPointcut" method="printLog" />
		</aop:aspect> -->
		
		<!-- <aop:aspect ref="before">
			<aop:before pointcut-ref="allPointcut" method="beforeLog" />
		</aop:aspect>
		
		<aop:aspect ref="afterReturning">
			<aop:after-returning pointcut-ref="getPointcut" method="afterLog" />
			<aop:after-returning pointcut-ref="getPointcut" method="afterLog" returning="returnObj" />
		</aop:aspect>
		
		<aop:aspect ref="afterThrowing">
			<aop:after-throwing pointcut-ref="allPointcut" method="exceptionLog" />
			<aop:after-throwing pointcut-ref="allPointcut" method="exceptionLog" throwing="exceptObj" />
		</aop:aspect>
		
		<aop:aspect ref="after">
			<aop:after pointcut-ref="allPointcut" method="finallyLog" />
		</aop:aspect>
		
		<aop:aspect ref="around">
			<aop:around pointcut-ref="allPointcut" method="aroundLog" />
		</aop:aspect>
	</aop:config> -->
	
	
	
	<aop:aspectj-autoproxy></aop:aspectj-autoproxy>
	
	
	
	<!-- DataSource 설정 -->
	<context:property-placeholder location="classpath:database.properties" />
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
	</bean>
	
	<!-- Spring JDBC 설정 -->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	
	<bean id="sessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
	<property name="dataSource" ref="dataSource" />
	<property name="configLocation" value="classpath:sql-map-config.xml" />
	</bean>
	
	
	<!-- Spring과 Mybatis 연동 설정 -->
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionFactoryBean">
	<property name="configLocation" value="classpath:sql-map-config.xml" />
	<property name="dataSource" ref="dataSource" />
	</bean>
	<bean class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg ref="sqlSession" />
	</bean>
</beans>


<!-- <bean id="tv" class="polymorphism.SamsungTV" p:speaker-ref="sony" p:price="270000"> init-method="initMethod" destroy-method="destroyMethod" lazy-init="true" scope="prototype"
	 -->	
		<!-- <constructor-arg index="0" ref="sony"></constructor-arg>
		<constructor-arg index="1" value="270000"></constructor-arg> 
		
		<property name="speaker" ref="apple"></property>
		<property name="price" value="270000"></property>-->
		
		
	<!-- </bean>
	
	<bean id="sony" class="polymorphism.SonySpeaker" />
	
	<bean id="apple" class="polymorphism.AppleSpeaker" /> -->
		
	<!-- <bean id="lg" class="polymorphism.LgTV" /> -->
	
	
	
	 <!-- <bean id="collectionBean" class="com.springbook.ioc.injection.CollectionBean">
		<property name="addressList"> -->
			<!-- <list>
				<value>서울시 강남구 역삼동</value>
				<value>서울시 성동구 행당동</value>
			</list> -->
			
			<!-- <set value-type="java.lang.String">
				<value>서울시 강남구 역삼동</value>
				<value>서울시 성동구 성수동</value>
				<value>서울시 성동구 성수동</value>			
			</set> -->
			
			<!-- <map>
				<entry>
					<key><value>고길동</value></key>
					<value>서울시 강남구 역삼동</value>
				</entry>
				<entry>
					<key><value>마이콜</value></key>
					<value>서울시 강서구 화곡동</value>
				</entry>
			</map> -->
			
			 <!-- <props>
				<prop key="고길동">서울시 강남구 역삼동</prop>
				<prop key="마이콜">서울시 강서구 화곡동</prop>
			</props>
		</property>
	</bean>  -->

